{"version":3,"sources":["model/app.state.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ContractNameMap","App","ethereum","window","useState","defaultAccount","setDefaultAccount","balance","setBalance","web3Provider","setWeb3Provider","scWeth","setContractWeth","scMasterchef","setContractMasterchef","setContractDd2","valueDeposit","setValueDeposit","valueWithdraw","setValueWithdraw","errorMessage","setErrorMessage","isLoading","setStateLoading","openLoading","setOpenLoading","openDeposit","setStateDeposit","openWithdraw","setStateWithdraw","totalStake","setTotalStake","tokenEarned","setTokenEarned","yourStakeBal","setYourStakeBal","stateApprove","setStateApprove","SC_WETH","SC_MASTERCHEF","connectWalletInjectd","a","provider","updateEthers","send","then","accounts","length","accountChangedHandler","saveProviderStore","catch","error","showErrorMessage","message","connectWalletConnectedConnector","WalletConnectProvider","infuraId","enable","connected","newAccount","on","location","reload","console","log","disconnect","chainId","code","reason","localStorage","clear","resetForm","type","setItem","useEffect","handleConnectWhenInit","getInfoStaticInjected","getItem","ethers","utils","isAddress","getBalance","fetchDataAll","tempProvider","providers","Web3Provider","tempSigner","getSigner","tempContractWeth","Contract","ERC20_ABI","tempContractMasterchef","ERC20_ABI_MSC","tempContractDd2","ERC20_ABI_DD2","result","Number","formatEther","toFixed","etherMultiCall","Multicall","ethersProvider","tryAggregate","contractCallContext","reference","contractAddress","abi","calls","methodName","methodParameters","resultObj","call","key","arrObj","callsReturnContext","objItem","forEach","item","Object","assign","returnValues","hex","entries","results","finally","stateBalApproved","balApproved","isNaN","approveWethToMaster","valueConvert","parseEther","approve","txn","wait","e","depositToMasterchef","handleDeposit","value","deposit","handleWithdraw","withdraw","setTimeout","withdrawMasterchef","valueChange","onHarvest","BigNumber","from","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","borderRadius","className","marginBottom","Button","variant","onClick","disabled","Modal","open","onClose","event","preventDefault","BackdropComponent","Backdrop","closeAfterTransition","BackdropProps","timeout","Box","sx","placeholder","onChange","target","textAlign","lineHeight","color","zIndex","theme","drawer","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","StyledEngineProvider","injectFirst"],"mappings":"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","file":"static/js/main.835898d1.chunk.js","sourcesContent":["import WalletConnect from \"@walletconnect/client\";\r\n\r\nexport interface IInternalEvent {\r\n    event: string;\r\n    params: any;\r\n}\r\n\r\nexport enum ContractNameMap {\r\n    SC_WETH = 'SC_WETH',\r\n    SC_DD2 = 'SC_DD2',\r\n    SC_MASTERCHEF = 'SC_MASTERCHEF',\r\n}\r\n\r\nexport interface IAppState {\r\n    connector: WalletConnect | null;\r\n    fetching: boolean;\r\n    connected: boolean;\r\n    chainId: number;\r\n    showModal: boolean;\r\n    pendingRequest: boolean;\r\n    uri: string;\r\n    accounts: string[];\r\n    address: string;\r\n    result: any | null;\r\n\r\n    balanceOf: string;\r\n    valueDeposit: string;\r\n    valueWithdraw: string;\r\n    errorMessage: string;\r\n    isLoading: string;\r\n}\r\n\r\nexport const INITIAL_STATE: IAppState = {\r\n    connector: null,\r\n    fetching: false,\r\n    connected: false,\r\n    chainId: 1,\r\n    showModal: false,\r\n    pendingRequest: false,\r\n    uri: \"\",\r\n    accounts: [],\r\n    address: \"\",\r\n    result: null,\r\n\r\n    balanceOf: \"\",\r\n    valueDeposit: \"\",\r\n    valueWithdraw: \"\",\r\n    errorMessage: \"\",\r\n    isLoading: \"\",\r\n};","import React, {useEffect, useState} from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Box from '@mui/material/Box';\r\nimport Modal from '@mui/material/Modal';\r\nimport Backdrop from '@mui/material/Backdrop';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\nimport './App.scss';\r\nimport {BigNumber, ethers} from \"ethers\";\r\nimport ERC20_ABI from './instance/ERC20_ABI.json'\r\nimport ERC20_ABI_MSC from './instance/ERC20_ABI_MSC.json'\r\nimport ERC20_ABI_DD2 from './instance/ERC20_ABI_DD2.json'\r\nimport {Multicall} from \"ethereum-multicall\"\r\nimport WalletConnectProvider from '@walletconnect/web3-provider';\r\nimport {ContractNameMap} from \"./model/app.state\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        ethereum?: any\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const ethereum = window.ethereum;\r\n\r\n    const [defaultAccount, setDefaultAccount] = useState<string>('');\r\n    const [balance, setBalance] = useState<string>('');\r\n    const [web3Provider, setWeb3Provider] = useState<any>(null);\r\n    const [scWeth, setContractWeth] = useState<any>(null);\r\n    const [scMasterchef, setContractMasterchef] = useState<any>(null);\r\n    const [scDd2, setContractDd2] = useState<any>(null);\r\n\r\n    const [valueDeposit, setValueDeposit] = useState<any>('');\r\n    const [valueWithdraw, setValueWithdraw] = useState<any>('');\r\n    const [errorMessage, setErrorMessage] = useState<any>('');\r\n    const [isLoading, setStateLoading] = useState<boolean>(false);\r\n    const [openLoading, setOpenLoading] = useState<boolean>(false);\r\n    const [openDeposit, setStateDeposit] = useState<boolean>(false);\r\n    const [openWithdraw, setStateWithdraw] = useState<boolean>(false);\r\n\r\n    const [totalStake, setTotalStake] = useState<any>('');\r\n    const [tokenEarned, setTokenEarned] = useState<any>('');\r\n    const [yourStakeBal, setYourStakeBal] = useState<any>('');\r\n    const [stateApprove, setStateApprove] = useState<boolean>(false);\r\n\r\n    const SC_WETH = '0xc778417E063141139Fce010982780140Aa0cD5Ab';\r\n    const SC_MASTERCHEF = '0x9da687e88b0A807e57f1913bCD31D56c49C872c2';\r\n    const SC_DD2 = '0xb1745657CB84c370DD0Db200a626d06b28cc5872';\r\n\r\n    /**\r\n     * Connect with connect đã inject browser (vì js của metamask đã được inject vào trong windown)\r\n     * @returns {Promise<void>}\r\n     */\r\n    const connectWalletInjectd = async () => {\r\n        if (ethereum) {\r\n            const provider = updateEthers(ethereum);\r\n            // debugger\r\n            await provider.send('eth_requestAccounts', []).then(accounts => {\r\n                if (accounts.length > 0) {\r\n                    accountChangedHandler(accounts[0]);\r\n                    saveProviderStore('injected');\r\n                }\r\n            }).catch(error => showErrorMessage(error.message));\r\n        } else {\r\n            showErrorMessage('No provider exists')\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect wallet for mobile\r\n     * @returns {Promise<void>}\r\n     */\r\n    const connectWalletConnectedConnector = async () => {\r\n        //  Create WalletConnect Provider\r\n        const provider = new WalletConnectProvider({\r\n            infuraId: \"5194fde9bf364940a1bbaffd59534e78\",\r\n        });\r\n        await provider.enable();\r\n        updateEthers(provider);\r\n        if (provider.connected) {\r\n            saveProviderStore('walletconnect');\r\n            accountChangedHandler(provider.accounts[0]);\r\n        }\r\n    }\r\n\r\n    const chainChangedHandler = () => {\r\n        // reload the page to avoid any errors with chain change mid use of application\r\n        window.location.reload();\r\n    }\r\n    const accountChangedHandler = (newAccount: any) => {\r\n        setDefaultAccount(newAccount);\r\n    }\r\n\r\n\r\n    // listen for account changes\r\n    ethereum?.on('accountsChanged', accountChangedHandler);\r\n    ethereum?.on('chainChanged', chainChangedHandler);\r\n\r\n    /**\r\n     * When disconnect, this function to be trigger\r\n     */\r\n    web3Provider?.provider?.on(\"accountsChanged\", (accounts: string[]) => {\r\n        console.log('account changed');\r\n        disconnect();\r\n    });\r\n    // Subscribe to chainId change\r\n    web3Provider?.provider?.on(\"chainChanged\", (chainId: number) => {\r\n        console.log('chainChanged');\r\n        disconnect();\r\n    });\r\n    // Subscribe to session disconnection\r\n    web3Provider?.provider?.on(\"disconnect\", (code: number, reason: string) => {\r\n        console.log('disconnect');\r\n        disconnect();\r\n    });\r\n\r\n    /**\r\n     * This function only clear data in browser, however it connects with wallet\r\n     */\r\n    const disconnect = async () => {\r\n        window.localStorage.clear();\r\n        setDefaultAccount('');\r\n\r\n        setTotalStake('');\r\n        setTokenEarned('');\r\n        setYourStakeBal('')\r\n        setStateApprove(false);\r\n        resetForm();\r\n    }\r\n\r\n    const saveProviderStore = (type: string) => {\r\n        window.localStorage.setItem(\"provider\", type);\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleConnectWhenInit();\r\n        getInfoStaticInjected();\r\n    }, [defaultAccount]);\r\n\r\n    const handleConnectWhenInit = async () => {\r\n        //check login, injected or walletconnect\r\n        const provider = window.localStorage.getItem('provider');\r\n        if (provider === 'walletconnect') {\r\n            connectWalletConnectedConnector();\r\n        }\r\n        if (provider === 'injected') {\r\n            connectWalletInjectd();\r\n        }\r\n    }\r\n\r\n    const getInfoStaticInjected = async () => {\r\n        if (defaultAccount && ethers.utils.isAddress(defaultAccount)) {\r\n            await getBalance();\r\n            await fetchDataAll();\r\n        }\r\n    }\r\n\r\n//     // Subscribe to accounts change\r\n//     connector?.on(\"accountsChanged\", (accounts: string) => {\r\n//         console.log(accounts);\r\n//         onConnect(accounts);\r\n//     });\r\n//\r\n// // Subscribe to chainId change\r\n//     connector?.on(\"chainChanged\", (chainId: number) => {\r\n//         console.log(chainId);\r\n//     });\r\n//\r\n// // Subscribe to session disconnection\r\n//     connector?.on(\"disconnect\", (code: number, reason: string) => {\r\n//         console.log(code, reason);\r\n//         disconnect();\r\n//     });\r\n\r\n    const updateEthers = (provider: any) => {\r\n        let tempProvider = new ethers.providers.Web3Provider(provider);\r\n        setWeb3Provider(tempProvider);\r\n        let tempSigner = tempProvider.getSigner();\r\n        let tempContractWeth = new ethers.Contract(SC_WETH, ERC20_ABI, tempSigner);\r\n        let tempContractMasterchef = new ethers.Contract(SC_MASTERCHEF, ERC20_ABI_MSC, tempSigner);\r\n        let tempContractDd2 = new ethers.Contract(SC_DD2, ERC20_ABI_DD2, tempSigner);\r\n        setContractWeth(tempContractWeth);\r\n        setContractMasterchef(tempContractMasterchef);\r\n        setContractDd2(tempContractDd2);\r\n\r\n        return tempProvider;\r\n    }\r\n\r\n    const getBalance = async () => {\r\n        await web3Provider.getBalance(defaultAccount).then((result: any) => {\r\n            setBalance(Number(ethers.utils.formatEther(result)).toFixed(3));\r\n        })\r\n    }\r\n\r\n    const resetForm = () => {\r\n        setValueDeposit('');\r\n        setValueWithdraw('');\r\n        setStateDeposit(false);\r\n        setStateWithdraw(false);\r\n    }\r\n\r\n    const fetchDataAll = async () => {\r\n        const etherMultiCall = new Multicall({ethersProvider: web3Provider, tryAggregate: true});\r\n\r\n        const contractCallContext = [\r\n            {\r\n                reference: ContractNameMap.SC_WETH,\r\n                contractAddress: SC_WETH,\r\n                abi: ERC20_ABI,\r\n                calls: [\r\n                    {\r\n                        reference: 'balance',\r\n                        methodName: 'balanceOf',\r\n                        methodParameters: [SC_MASTERCHEF]\r\n                    },\r\n                    {\r\n                        reference: 'balApproved',\r\n                        methodName: 'allowance',\r\n                        methodParameters: [defaultAccount, SC_MASTERCHEF]\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                reference: ContractNameMap.SC_MASTERCHEF,\r\n                contractAddress: SC_MASTERCHEF,\r\n                abi: ERC20_ABI_MSC,\r\n                calls: [\r\n                    {\r\n                        reference: 'tokenEarned',\r\n                        methodName: 'pendingDD2',\r\n                        methodParameters: [defaultAccount]\r\n                    },\r\n                    {\r\n                        reference: 'balance',\r\n                        methodName: 'userInfo',\r\n                        methodParameters: [defaultAccount]\r\n                    }\r\n                ]\r\n            }\r\n        ];\r\n        const resultObj: any = {};\r\n        await etherMultiCall.call(contractCallContext).then((result) => {\r\n            for (const [key, obj] of Object.entries(result.results)) {\r\n                const arrObj: any[] = obj.callsReturnContext;\r\n                let objItem = {};\r\n                arrObj.forEach(item => {\r\n                    Object.assign(objItem, {[item.reference]: item.returnValues[0].hex || 0})\r\n                })\r\n                resultObj[key] = objItem;\r\n            }\r\n\r\n        }).finally(() => {\r\n            console.log(resultObj);\r\n            setStateApprove(stateBalApproved(ethers.utils.formatEther(resultObj[ContractNameMap.SC_WETH].balApproved)));\r\n            setTotalStake(ethers.utils.formatEther(resultObj[ContractNameMap.SC_WETH].balance));\r\n            setYourStakeBal(ethers.utils.formatEther(resultObj[ContractNameMap.SC_MASTERCHEF].balance));\r\n            setTokenEarned(ethers.utils.formatEther(resultObj[ContractNameMap.SC_MASTERCHEF].tokenEarned));\r\n        });\r\n\r\n    }\r\n\r\n    const stateBalApproved = (balance: string): boolean => {\r\n        if (balance && !Number.isNaN(balance)) {\r\n            return Number(balance) > 0;\r\n        }\r\n        return false;\r\n\r\n    }\r\n\r\n    const approveWethToMaster = async () => {\r\n        if (balance) {\r\n            setOpenLoading(true);\r\n            const valueConvert = ethers.utils.parseEther(balance);\r\n            await scWeth.approve(SC_MASTERCHEF, valueConvert).then(async (txn: any) => {\r\n                await txn?.wait();\r\n                setStateApprove(true);\r\n            }).catch((e: any) => {\r\n                showErrorMessage(e.message);\r\n            });\r\n            setOpenLoading(false);\r\n        }\r\n    }\r\n\r\n    const depositToMasterchef = async () => {\r\n        if (valueDeposit) {\r\n            setStateLoading(true);\r\n            const valueConvert = ethers.utils.parseEther(valueDeposit);\r\n            const txn = await handleDeposit(valueConvert);\r\n            if (txn) {\r\n                await txn?.wait();\r\n                getInfoStaticInjected();\r\n            }\r\n            resetForm();\r\n            setStateLoading(false);\r\n        }\r\n    }\r\n\r\n    const handleDeposit = async (value: BigNumber) => {\r\n        return await scMasterchef.deposit(value).catch((e: any) => {\r\n            showErrorMessage(e.message);\r\n            setStateDeposit(false);\r\n        });\r\n    }\r\n\r\n    const handleWithdraw = async (value: BigNumber) => {\r\n        return await scMasterchef.withdraw(value).catch((e: any) => {\r\n            showErrorMessage(e.message);\r\n            setStateWithdraw(false);\r\n        });\r\n    }\r\n\r\n    const showErrorMessage = (message: string) => {\r\n        setErrorMessage(message);\r\n        setTimeout(() => {\r\n            setErrorMessage('');\r\n        }, 5000);\r\n    }\r\n\r\n    const withdrawMasterchef = async () => {\r\n        setStateLoading(true);\r\n        const valueChange = ethers.utils.parseEther(valueWithdraw);\r\n        const txn = await handleWithdraw(valueChange);\r\n        if (txn) {\r\n            await txn?.wait();\r\n            getInfoStaticInjected();\r\n        }\r\n        resetForm();\r\n        setStateLoading(false);\r\n    }\r\n\r\n    const onHarvest = async () => {\r\n        setOpenLoading(true);\r\n        console.log(BigNumber.from(\"0\"))\r\n        const txn = await handleWithdraw(BigNumber.from(\"0\"));\r\n        if (txn) {\r\n            await txn?.wait();\r\n            getInfoStaticInjected();\r\n            resetForm();\r\n        }\r\n        setOpenLoading(false);\r\n    }\r\n\r\n\r\n    const style = {\r\n        position: 'absolute' as 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: 400,\r\n        bgcolor: 'background.paper',\r\n        border: '2px solid #000',\r\n        boxShadow: 24,\r\n        p: 4,\r\n        borderRadius: '1rem'\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"app-container\">\r\n                <h1>React Web3</h1>\r\n                {defaultAccount ?\r\n                    <>\r\n                        <div className=\"info-account\">\r\n                            <div className=\"wallet-info\">\r\n                                <h3 style={{marginBottom: 0}}>My wallet: {defaultAccount}</h3>\r\n                                <h3>Balance: {balance ? `${balance} WETH` : ''}</h3>\r\n                            </div>\r\n\r\n                            <div className=\"harvest-info\">\r\n                                <h3>Token earned: {tokenEarned ? `${tokenEarned} DD2` : ''}</h3>\r\n                                <Button variant=\"contained\" onClick={onHarvest}>Harvest</Button>\r\n                            </div>\r\n                            <div className=\"form-approve\">\r\n                                {stateApprove ?\r\n                                    <>\r\n                                        <Button variant=\"contained\" onClick={() => {\r\n                                            setStateDeposit(true)\r\n                                        }}>Deposit</Button>\r\n                                        <Button variant=\"contained\" onClick={() => {\r\n                                            setStateWithdraw(true)\r\n                                        }}>Withdraw</Button>\r\n                                    </> :\r\n                                    <Button variant=\"contained\" onClick={approveWethToMaster}\r\n                                            disabled={isLoading}>Approve</Button>\r\n                                }\r\n                            </div>\r\n\r\n                            <h3>Your stake: {yourStakeBal ? `${yourStakeBal} WETH` : ''}</h3>\r\n                            <h3>Total stake: {totalStake ? `${totalStake} WETH` : ''}</h3>\r\n                        </div>\r\n                    </>\r\n                    : ''}\r\n                {\r\n                    !defaultAccount ?\r\n                        <>\r\n                            <div className=\"button-group\">\r\n                                <Button variant=\"contained\" onClick={connectWalletInjectd}>Connect metamask</Button>\r\n                                <Button variant=\"contained\" onClick={connectWalletConnectedConnector}>Connect wallet\r\n                                    connect\r\n                                </Button>\r\n                            </div>\r\n                        </> : <>\r\n                            <Button variant=\"contained\" className=\"disconnect\" onClick={disconnect}>Logout /\r\n                                Disconnect</Button>\r\n                        </>\r\n                }\r\n                <small className=\"show-error-message\">{errorMessage}</small>\r\n\r\n                <Modal\r\n                    aria-labelledby=\"transition-modal-title\"\r\n                    aria-describedby=\"transition-modal-description\"\r\n                    open={openDeposit}\r\n                    onClose={(event: any) => {\r\n                        !isLoading ? setStateDeposit(false) : event.preventDefault()\r\n                    }}\r\n                    BackdropComponent={Backdrop}\r\n                    closeAfterTransition\r\n                    BackdropProps={{\r\n                        timeout: 500,\r\n                    }}>\r\n                    <Box sx={style}>\r\n                        <div className=\"form-deposit\">\r\n                            <input type=\"number\" placeholder=\"input amount\" value={valueDeposit}\r\n                                   disabled={isLoading}\r\n                                   onChange={(event) => setValueDeposit(event.target.value)}/> <br/>\r\n                            <label>Your WETH balance: {balance ? `${balance} WETH` : ''}</label>\r\n                            <Button variant=\"contained\" className=\"form-button\" onClick={depositToMasterchef}\r\n                                    disabled={isLoading}>{isLoading ? 'loading...' : 'Deposit'}</Button>\r\n                        </div>\r\n                    </Box>\r\n                </Modal>\r\n\r\n                <Modal\r\n                    aria-labelledby=\"transition-modal-title\"\r\n                    aria-describedby=\"transition-modal-description\"\r\n                    open={openWithdraw}\r\n                    onClose={(event: any) => {\r\n                        !isLoading ? setStateWithdraw(false) : event.preventDefault()\r\n                    }}\r\n                    BackdropComponent={Backdrop}\r\n                    closeAfterTransition\r\n                    BackdropProps={{\r\n                        timeout: 500,\r\n                    }}>\r\n                    <Box sx={style}>\r\n                        <div className=\"form-withdraw\">\r\n                            <input type=\"number\" placeholder=\"input amount\" value={valueWithdraw}\r\n                                   disabled={isLoading}\r\n                                   onChange={(event) => setValueWithdraw(event.target.value)}/> <br/>\r\n                            <label style={{textAlign: 'center', lineHeight: 2}}>Your WETH\r\n                                deposited: {yourStakeBal ? `${yourStakeBal} WETH` : ''}</label>\r\n                            <Button variant=\"contained\" className=\"form-button\" onClick={withdrawMasterchef}\r\n                                    disabled={isLoading}>{isLoading ? 'loading...' : 'Withdraw'}</Button>\r\n                        </div>\r\n                    </Box>\r\n                </Modal>\r\n            </div>\r\n\r\n            <Backdrop\r\n                sx={{color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1}}\r\n                open={openLoading}>\r\n                <CircularProgress color=\"inherit\"/>\r\n            </Backdrop>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {StyledEngineProvider} from '@mui/material/styles';\n\nconst root = ReactDOM.createRoot(\n    document.getElementById('root') as HTMLElement\n);\nroot.render(\n    <React.StrictMode>\n        <StyledEngineProvider injectFirst>\n            <App/>\n        </StyledEngineProvider>\n    </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}